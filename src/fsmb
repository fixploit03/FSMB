#!/usr/bin/python3
# Risk is borne by the user!

import sys
import os
import subprocess
import re
from PyQt5.QtWidgets import (
    QApplication, QWidget, QVBoxLayout, QHBoxLayout, QLabel, QLineEdit, QPushButton, QRadioButton, QFileDialog, QMessageBox, QTextEdit, QGroupBox, QCheckBox, QTabWidget, QComboBox, QSizePolicy, QSpacerItem
)
from PyQt5.QtCore import Qt, QThread, pyqtSignal
from PyQt5.QtGui import QTextCursor

# Ensure the script is run as root
if os.geteuid() != 0:
    print("This program must be run as root!")
    sys.exit(1)

# Thread for running Nmap
class NmapThread(QThread):
    output_signal = pyqtSignal(str)  # Signal to send Nmap output
    finished_signal = pyqtSignal()  # Signal to indicate completion

    def __init__(self, nmap_command):
        super().__init__()
        self.nmap_command = nmap_command
        self.process = None  # Nmap process

    def run(self):
        try:
            # Run Nmap and capture output in real-time
            self.process = subprocess.Popen(
                self.nmap_command,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                bufsize=1,
                universal_newlines=True
            )

            # Read Nmap output line by line
            for line in self.process.stdout:
                self.output_signal.emit(line.strip())  # Send output to GUI

            # Wait for Nmap process to finish
            self.process.wait()
        except Exception as e:
            self.output_signal.emit(f"Error: {str(e)}")
        finally:
            self.finished_signal.emit()  # Emit finished signal

    def stop(self):
        # Stop Nmap process if running
        if self.process:
            self.process.terminate()
            self.process.wait()
            self.output_signal.emit("Scan canceled by user.")

# Thread for running Hydra
class HydraThread(QThread):
    output_signal = pyqtSignal(str)  # Signal to send Hydra output
    finished_signal = pyqtSignal()  # Signal to indicate completion

    def __init__(self, hydra_command):
        super().__init__()
        self.hydra_command = hydra_command
        self.process = None  # Hydra process

    def run(self):
        try:
            # Run Hydra and capture output in real-time
            self.process = subprocess.Popen(
                self.hydra_command,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                bufsize=1,
                universal_newlines=True
            )

            # Read Hydra output line by line
            for line in self.process.stdout:
                self.output_signal.emit(line.strip())  # Send output to GUI

            # Wait for Hydra process to finish
            self.process.wait()
        except Exception as e:
            self.output_signal.emit(f"Error: {str(e)}")
        finally:
            self.finished_signal.emit()  # Emit finished signal

    def stop(self):
        # Stop Hydra process if running
        if self.process:
            self.process.terminate()
            self.process.wait()
            self.output_signal.emit("Attack canceled by user.")

class HydraBruteForceGUI(QWidget):
    def __init__(self):
        super().__init__()
        self.nmap_thread = None  # Thread for running Nmap
        self.hydra_thread = None  # Thread for running Hydra
        self.initUI()
        self.setAttribute(Qt.WA_QuitOnClose, True)  # Ensure the app quits on close

    def initUI(self):
        self.setWindowTitle('FSMB (F*ck SMB!)')
        self.setFixedSize(900, 700)
        self.setWindowFlags(self.windowFlags() & ~Qt.WindowMaximizeButtonHint)  # Disable maximize button

        # Set background color and style
        self.setStyleSheet("""
            QWidget {
                background-color: #2E3440;
                color: #ECEFF4;
            }
            QLabel {
                color: #ECEFF4;
            }
            QPushButton {
                background-color: #4C566A;
                color: #ECEFF4;
                border: 1px solid #81A1C1;
                padding: 5px;
                border-radius: 5px;
                height: 35px;
            }
            QPushButton:hover {
                background-color: #81A1C1;
                color: #2E3440;
            }
            QPushButton:disabled {
                background-color: #3B4252;
                color: #4C566A;
            }
            QLineEdit, QTextEdit, QComboBox {
                background-color: #3B4252;
                color: #ECEFF4;
                border: 1px solid #81A1C1;
                padding: 5px;
                border-radius: 5px;
                font-size: 14px;
                height: 35px;
            }
            QGroupBox {
                border: 1px solid #81A1C1;
                border-radius: 5px;
                margin-top: 10px;
                padding-top: 15px;
                font-weight: bold;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 3px;
            }
            QTabWidget::pane {
                border: 1px solid #81A1C1;
                padding: 5px;
                border-radius: 5px;
            }
            QTabBar::tab {
                background: #4C566A;
                color: #ECEFF4;
                padding: 10px;
                border: 1px solid #81A1C1;
                border-bottom-color: #2E3440;
                border-radius: 5px;
            }
            QTabBar::tab:selected {
                background: #81A1C1;
                color: #2E3440;
            }
        """)

        # Create tab widget
        self.tabs = QTabWidget()
        self.tab1 = QWidget()  # Tab 1: SMB Port Scan with Nmap
        self.tab2 = QWidget()  # Tab 2: SMB Brute Force
        self.tab3 = QTabWidget()  # Tab 3: Log Output
        self.tab3_log_nmap = QWidget()  # Sub-tab 1: Nmap Log
        self.tab3_log_hydra = QWidget()  # Sub-tab 2: Hydra Log
        self.tab3_export_log = QWidget()  # Sub-tab 3: Export Log
        self.tab4 = QWidget()  # Tab 4: About the Program
        self.tabs.addTab(self.tab1, "üîç SMB Port Scan")
        self.tabs.addTab(self.tab2, "üí• SMB Brute Force")
        self.tabs.addTab(self.tab3, "üìú Log Output")
        self.tabs.addTab(self.tab4, "üìñ About the Program")

        # Setup Tab 1: SMB Port Scan with Nmap
        self.setup_tab1()
        # Setup Tab 2: SMB Brute Force
        self.setup_tab2()
        # Setup Tab 3: Log Output
        self.setup_tab3()
        # Setup Tab 4: About the Program
        self.setup_tab4()

        # Set main layout
        layout = QVBoxLayout()
        layout.addWidget(self.tabs)
        self.setLayout(layout)

    def setup_tab1(self):
        layout = QVBoxLayout()

        # Group Box for Host
        self.host_group = QGroupBox("üîç Host/Target")
        host_layout = QVBoxLayout()

        # Input Host/Target
        self.host_label = QLabel('üñ•Ô∏è  Host/Target:')
        self.host_input = QLineEdit(self)
        self.host_input.setPlaceholderText('Enter host or IP address')
        self.host_input.setFixedHeight(35)
        host_layout.addWidget(self.host_label)
        host_layout.addWidget(self.host_input)

        self.host_group.setLayout(host_layout)
        layout.addWidget(self.host_group)

        # Group Box for SMB Port
        self.port_group = QGroupBox("üñß SMB Port")
        port_layout = QVBoxLayout()

        # Input SMB Port
        self.port_label = QLabel('SMB Port (default: 445):')
        self.port_input = QLineEdit(self)
        self.port_input.setPlaceholderText('445')
        self.port_input.setFixedHeight(35)
        port_layout.addWidget(self.port_label)
        port_layout.addWidget(self.port_input)

        self.port_group.setLayout(port_layout)
        layout.addWidget(self.port_group)

        # Group Box for Scan Technique
        self.scan_technique_group = QGroupBox("üîß Scan Technique")
        scan_technique_layout = QVBoxLayout()

        # Dropdown Scan Technique
        self.scan_technique_label = QLabel('Select Scan Technique:')
        self.scan_technique_dropdown = QComboBox(self)
        self.scan_technique_dropdown.addItems([
            'SYN Scan (-sS)',
            'Connect Scan (-sT)',
            'UDP Scan (-sU)',
            'ACK Scan (-sA)',
            'FIN Scan (-sF)',
            'NULL Scan (-sN)',
            'XMAS Scan (-sX)',
            'Window Scan (-sW)',
            'Maimon Scan (-sM)',
            'Idle Scan (-sI)',
            'IP Protocol Scan (-sO)'
        ])
        self.scan_technique_dropdown.setCurrentIndex(0)
        self.scan_technique_dropdown.setFixedHeight(35)
        scan_technique_layout.addWidget(self.scan_technique_label)
        scan_technique_layout.addWidget(self.scan_technique_dropdown)

        self.scan_technique_group.setLayout(scan_technique_layout)
        layout.addWidget(self.scan_technique_group)

        # Group Box for Timing Scan
        self.timing_group = QGroupBox("‚è±Ô∏è Timing Scan")
        timing_layout = QVBoxLayout()

        # Scan Timing Options
        self.timing_label = QLabel('Select Timing Option:')
        self.timing_dropdown = QComboBox(self)
        self.timing_dropdown.addItems([
            '0 - Paranoid (Very Slow)',
            '1 - Sneaky (Slow)',
            '2 - Polite (Moderate)',
            '3 - Normal (Default)',
            '4 - Aggressive (Fast)',
            '5 - Insane (Very Fast)'
        ])
        self.timing_dropdown.setCurrentIndex(3)
        self.timing_dropdown.setFixedHeight(35)
        timing_layout.addWidget(self.timing_label)
        timing_layout.addWidget(self.timing_dropdown)

        self.timing_group.setLayout(timing_layout)
        layout.addWidget(self.timing_group)

        # Spacer
        layout.addItem(QSpacerItem(20, 20, QSizePolicy.Minimum, QSizePolicy.Expanding))

        # Scan Options (Vuln, Version, OS)
        self.scan_options_layout = QHBoxLayout()
        self.nse_checkbox = QCheckBox('Scan Vulnerabilities', self)
        self.nse_checkbox.setChecked(False)
        self.scan_version_checkbox = QCheckBox('Scan Version', self)
        self.scan_version_checkbox.setChecked(False)
        self.scan_os_checkbox = QCheckBox('Scan OS', self)
        self.scan_os_checkbox.setChecked(False)
        self.scan_options_layout.addWidget(self.nse_checkbox)
        self.scan_options_layout.addWidget(self.scan_version_checkbox)
        self.scan_options_layout.addWidget(self.scan_os_checkbox)
        layout.addLayout(self.scan_options_layout)

        # Spacer
        layout.addItem(QSpacerItem(20, 20, QSizePolicy.Minimum, QSizePolicy.Expanding))

        # Button Layout (Start and Cancel Scan)
        self.button_layout = QHBoxLayout()
        self.cancel_scan_button = QPushButton('‚ùå Cancel Scan', self)
        self.cancel_scan_button.clicked.connect(self.cancel_nmap_scan)
        self.cancel_scan_button.setEnabled(False)
        self.cancel_scan_button.setFixedHeight(35)
        self.scan_button = QPushButton('üöÄ Start Scan', self)
        self.scan_button.clicked.connect(self.start_nmap_scan)
        self.scan_button.setFixedHeight(35)
        self.button_layout.addWidget(self.cancel_scan_button)
        self.button_layout.addWidget(self.scan_button)
        layout.addLayout(self.button_layout)

        self.tab1.setLayout(layout)

    def setup_tab2(self):
        layout = QVBoxLayout()

        # Username Options
        self.username_group = QGroupBox("üë§ Username Options")
        self.username_layout = QVBoxLayout()
        self.username_single = QRadioButton('Single Username')
        self.username_list = QRadioButton('Username List')
        self.username_single.setChecked(True)
        self.username_input = QLineEdit(self)
        self.username_input.setPlaceholderText('Enter username')
        self.username_input.setFixedHeight(35)
        self.username_list_button = QPushButton('üìÇ Select Username List', self)
        self.username_list_button.clicked.connect(self.browse_username_list)
        self.username_list_button.setFixedHeight(35)
        self.username_layout.addWidget(self.username_single)
        self.username_layout.addWidget(self.username_input)
        self.username_layout.addWidget(self.username_list)
        self.username_layout.addWidget(self.username_list_button)
        self.username_group.setLayout(self.username_layout)
        layout.addWidget(self.username_group)

        # Spacer
        layout.addItem(QSpacerItem(20, 20, QSizePolicy.Minimum, QSizePolicy.Expanding))

        # Password Options
        self.password_group = QGroupBox("üîë Password Options")
        self.password_layout = QVBoxLayout()
        self.password_single = QRadioButton('Single Password')
        self.password_list = QRadioButton('Password List')
        self.password_single.setChecked(True)
        self.password_input = QLineEdit(self)
        self.password_input.setPlaceholderText('Enter password')
        self.password_input.setFixedHeight(35)
        self.password_list_button = QPushButton('üìÇ Select Password List', self)
        self.password_list_button.clicked.connect(self.browse_password_list)
        self.password_list_button.setFixedHeight(35)
        self.password_layout.addWidget(self.password_single)
        self.password_layout.addWidget(self.password_input)
        self.password_layout.addWidget(self.password_list)
        self.password_layout.addWidget(self.password_list_button)
        self.password_group.setLayout(self.password_layout)
        layout.addWidget(self.password_group)

        # Spacer
        layout.addItem(QSpacerItem(20, 20, QSizePolicy.Minimum, QSizePolicy.Expanding))

        # Group Box for Number of Tasks
        self.task_group = QGroupBox("üî¢ Number of Tasks")
        task_layout = QVBoxLayout()

        self.task_label = QLabel('Number of Tasks (1-16):')
        self.task_dropdown = QComboBox(self)
        self.task_dropdown.addItems([str(i) for i in range(1, 17)])
        self.task_dropdown.setCurrentIndex(0)
        self.task_dropdown.setFixedHeight(35)
        task_layout.addWidget(self.task_label)
        task_layout.addWidget(self.task_dropdown)

        self.task_group.setLayout(task_layout)
        layout.addWidget(self.task_group)

        # Spacer
        layout.addItem(QSpacerItem(20, 20, QSizePolicy.Minimum, QSizePolicy.Expanding))

        # Additional Options
        self.options_layout = QHBoxLayout()
        self.verbose_checkbox = QCheckBox('Enable Verbose Mode', self)
        self.verbose_checkbox.setChecked(False)
        self.stop_on_success_checkbox = QCheckBox('Stop on Success', self)
        self.stop_on_success_checkbox.setChecked(False)
        self.options_layout.addWidget(self.verbose_checkbox)
        self.options_layout.addWidget(self.stop_on_success_checkbox)
        layout.addLayout(self.options_layout)

        # Spacer
        layout.addItem(QSpacerItem(20, 20, QSizePolicy.Minimum, QSizePolicy.Expanding))

        # Start and Cancel Buttons
        self.button_layout = QHBoxLayout()
        self.cancel_button = QPushButton('‚ùå Cancel Attack', self)
        self.cancel_button.clicked.connect(self.cancel_hydra_brute_force)
        self.cancel_button.setEnabled(False)
        self.cancel_button.setFixedHeight(35)
        self.start_button = QPushButton('üí• Start SMB Brute Force', self)
        self.start_button.clicked.connect(self.confirm_start_hydra_brute_force)
        self.start_button.setFixedHeight(35)
        self.button_layout.addWidget(self.cancel_button)
        self.button_layout.addWidget(self.start_button)
        layout.addLayout(self.button_layout)

        self.tab2.setLayout(layout)

    def setup_tab3(self):
        layout = QVBoxLayout()

        # Create tab widget for logs
        self.log_tabs = QTabWidget()
        
        # Sub-tab 1: Nmap Log
        self.log_nmap_layout = QVBoxLayout()
        self.log_nmap_label = QLabel('Nmap Output:')
        self.log_nmap_output = QTextEdit(self)
        self.log_nmap_output.setReadOnly(True)
        self.log_nmap_output.setMinimumHeight(300)
        self.log_nmap_output.setStyleSheet("background-color: #3B4252; color: #ECEFF4;")
        self.log_nmap_layout.addWidget(self.log_nmap_label)
        self.log_nmap_layout.addWidget(self.log_nmap_output)
        self.tab3_log_nmap.setLayout(self.log_nmap_layout)
        self.log_tabs.addTab(self.tab3_log_nmap, "Nmap Log")

        # Sub-tab 2: Hydra Log
        self.log_hydra_layout = QVBoxLayout()
        self.log_hydra_label = QLabel('Hydra Output:')
        self.log_hydra_output = QTextEdit(self)
        self.log_hydra_output.setReadOnly(True)
        self.log_hydra_output.setMinimumHeight(300)
        self.log_hydra_output.setStyleSheet("background-color: #3B4252; color: #ECEFF4;")
        self.log_hydra_layout.addWidget(self.log_hydra_label)
        self.log_hydra_layout.addWidget(self.log_hydra_output)
        self.tab3_log_hydra.setLayout(self.log_hydra_layout)
        self.log_tabs.addTab(self.tab3_log_hydra, "Hydra Log")

        # Sub-tab 3: Export Log to HTML
        self.tab3_export_log = QWidget()
        self.export_log_layout = QVBoxLayout()
        self.export_log_label = QLabel('Export Log to HTML:')
        self.export_log_label.setStyleSheet('font-size: 16px; font-weight: bold;')
        self.export_log_button = QPushButton('üíæ Export Log to HTML', self)
        self.export_log_button.clicked.connect(self.export_log_to_html)
        self.export_log_button.setFixedHeight(40)
        self.export_log_layout.addWidget(self.export_log_label)
        self.export_log_layout.addWidget(self.export_log_button)
        self.export_log_layout.addItem(QSpacerItem(20, 20, QSizePolicy.Minimum, QSizePolicy.Expanding))
        self.tab3_export_log.setLayout(self.export_log_layout)
        self.log_tabs.addTab(self.tab3_export_log, "Export Log")

        layout.addWidget(self.log_tabs)
        self.tab3.setLayout(layout)

    def setup_tab4(self):
        layout = QVBoxLayout()

        # Title
        title_label = QLabel('üìñ About the Program')
        title_label.setStyleSheet('font-size: 18px; font-weight: bold;')
        layout.addWidget(title_label)

        # Program Description
        description = """
        <p><b>About the Program:</b></p>
        <p>This program is a tool for performing brute force attacks on the SMB (Server Message Block) protocol. It is designed for educational purposes and security testing on systems you own or have permission to test.</p>

        <p><b>How to Use:</b></p>
        <ol>
            <li><b>Tab 1: SMB Port Scan</b> - Enter the target and SMB port, then select the desired scan technique. Click "Start Scan" to begin scanning.</li>
            <li><b>Tab 2: SMB Brute Force</b> - Configure username, password, and other options. Click "Start SMB Brute Force" to initiate the brute force attack.</li>
            <li><b>Tab 3: Log Output</b> - Monitor the results of the brute force attack and scanning in real-time here.</li>
        </ol>

        <p><b>Powered By:</b></p>
        <ul>
            <li><b>Nmap</b> - For port scanning and vulnerability detection.</li>
            <li><b>Hydra</b> - For performing brute force attacks on the SMB protocol.</li>
            <li><b>PyQt5</b> - For the graphical user interface (GUI).</li>
            <li><b>Python</b> - As the main programming language.</li>
        </ul>

        <p><b>Note:</b></p>
        <p>Ensure you have permission before performing brute force attacks on any system. This program is for educational and testing purposes only.</p>
        """
        description_label = QLabel(description)
        description_label.setWordWrap(True)
        layout.addWidget(description_label)

        # Add a horizontal line to separate content
        separator = QLabel('<hr>')
        separator.setStyleSheet('color: #81A1C1;')
        layout.addWidget(separator)

        # Add creator information
        creator_info = QLabel(
            'Created by Rofi (Fixploit03)\n'
            'GitHub: https://github.com/fixploit03/FSMB\n'
            'Copyright ¬© 2025 Rofi. All rights reserved.'
        )
        creator_info.setStyleSheet('font-size: 12px; color: #81A1C1;')
        creator_info.setAlignment(Qt.AlignCenter)
        layout.addWidget(creator_info)

        self.tab4.setLayout(layout)

    def browse_username_list(self):
        options = QFileDialog.Options()
        filename, _ = QFileDialog.getOpenFileName(self, "Select Username List", "", "Text Files (*.txt);;All Files (*)", options=options)
        if filename:
            self.username_input.setText(filename)

    def browse_password_list(self):
        options = QFileDialog.Options()
        filename, _ = QFileDialog.getOpenFileName(self, "Select Password List", "", "Text Files (*.txt);;All Files (*)", options=options)
        if filename:
            self.password_input.setText(filename)

    def start_nmap_scan(self):
        host = self.host_input.text()
        port = self.port_input.text().strip() or '445'

        # Validate host input
        if not host or not self.is_valid_host(host):
            QMessageBox.critical(self, 'Error', 'Host/Target is not valid! Please enter a valid IP address or hostname.')
            return

        # Get selected scan technique
        scan_technique = self.scan_technique_dropdown.currentText()
        scan_option = {
            'SYN Scan (-sS)': '-sS',
            'Connect Scan (-sT)': '-sT',
            'UDP Scan (-sU)': '-sU',
            'ACK Scan (-sA)': '-sA',
            'FIN Scan (-sF)': '-sF',
            'NULL Scan (-sN)': '-sN',
            'XMAS Scan (-sX)': '-sX',
            'Window Scan (-sW)': '-sW',
            'Maimon Scan (-sM)': '-sM',
            'Idle Scan (-sI)': '-sI',
            'IP Protocol Scan (-sO)': '-sO'
        }[scan_technique]

        # Get scan timing
        timing_option = self.timing_dropdown.currentText().split(' - ')[0]

        # Build Nmap command for SMB port scan
        nmap_command = [
            'nmap',
            '-T', timing_option,
            scan_option,
            '-p', port,
            host
        ]

        # Add additional options based on checkboxes
        if self.nse_checkbox.isChecked():
            nmap_command.extend(['--script', 'smb-vuln*'])
        if self.scan_version_checkbox.isChecked():
            nmap_command.append('-sV')
        if self.scan_os_checkbox.isChecked():
            nmap_command.append('-O')

        # Clear previous log output
        self.log_nmap_output.clear()

        # Disable start button and enable cancel button
        self.scan_button.setEnabled(False)
        self.cancel_scan_button.setEnabled(True)

        # Run Nmap in a separate thread
        self.nmap_thread = NmapThread(nmap_command)
        self.nmap_thread.output_signal.connect(self.update_nmap_output)
        self.nmap_thread.finished_signal.connect(self.on_nmap_finished)
        self.nmap_thread.start()

    def cancel_nmap_scan(self):
        # Stop Nmap thread if running
        if self.nmap_thread and self.nmap_thread.isRunning():
            self.nmap_thread.stop()
            self.nmap_thread.quit()
            self.nmap_thread.wait()

        # Disable buttons after cancellation
        self.scan_button.setEnabled(True)
        self.cancel_scan_button.setEnabled(False)

        # Show message box for cancellation
        QMessageBox.information(self, 'Canceled', 'Scan canceled.')

    def on_nmap_finished(self):
        # Enable start button and disable cancel button
        self.scan_button.setEnabled(True)
        self.cancel_scan_button.setEnabled(False)

        # Show message box for completion
        QMessageBox.information(self, 'Finished', 'Scan completed.')

    def update_nmap_output(self, text):
        # Add Nmap output to log
        self.log_nmap_output.append(text)
        self.log_nmap_output.moveCursor(QTextCursor.End)

    def confirm_start_hydra_brute_force(self):
        # Confirm before starting brute force
        confirmation = QMessageBox.question(
            self,
            'Confirmation',
            "You are about to start a brute force attack. Ensure you have permission to do so. Are you sure?",
            QMessageBox.Yes | QMessageBox.No,
            QMessageBox.No
        )

        if confirmation == QMessageBox.Yes:
            self.start_hydra_brute_force()

    def start_hydra_brute_force(self):
        host = self.host_input.text()
        port = self.port_input.text().strip() or '445'

        # Validate host input
        if not host or not self.is_valid_host(host):
            QMessageBox.critical(self, 'Error', 'Host/Target is not valid! Please enter a valid IP address or hostname.')
            return

        # Get usernames
        if self.username_single.isChecked():
            username = self.username_input.text()
            if not username:
                QMessageBox.critical(self, 'Error', 'Username cannot be empty! Please enter a username or select a username list.')
                return
            usernames = [username]
        else:
            username_file = self.username_input.text()
            if not username_file:
                QMessageBox.critical(self, 'Error', 'Username list file cannot be empty! Please enter a username or select a username list.')
                return
            try:
                with open(username_file, 'r', encoding='latin-1') as f:
                    usernames = f.read().splitlines()
            except FileNotFoundError:
                QMessageBox.critical(self, 'Error', 'Username list file not found!')
                return
            except Exception as e:
                QMessageBox.critical(self, 'Error', f'Failed to read username list: {str(e)}')
                return

        # Get passwords
        if self.password_single.isChecked():
            password = self.password_input.text()
            if not password:
                QMessageBox.critical(self, 'Error', 'Password cannot be empty! Please enter a password or select a password list.')
                return
            passwords = [password]
        else:
            password_file = self.password_input.text()
            if not password_file:
                QMessageBox.critical(self, 'Error', 'Password list file cannot be empty! Please enter a password or select a password list.')
                return
            try:
                with open(password_file, 'r', encoding='latin-1') as f:
                    passwords = f.read().splitlines()
            except FileNotFoundError:
                QMessageBox.critical(self, 'Error', 'Password list file not found!')
                return
            except Exception as e:
                QMessageBox.critical(self, 'Error', f'Failed to read password list: {str(e)}')
                return

        # Save usernames and passwords to temporary files
        with open('temp_users.txt', 'w', encoding='latin-1') as f:
            f.write('\n'.join(usernames))
        with open('temp_passwords.txt', 'w', encoding='latin-1') as f:
            f.write('\n'.join(passwords))

        # Build Hydra command
        hydra_command = [
            'hydra',
            '-L', 'temp_users.txt',
            '-P', 'temp_passwords.txt',
            host,
            'smb',
            '-s', port,
            '-t', self.task_dropdown.currentText()
        ]

        # Add verbose option if selected
        if self.verbose_checkbox.isChecked():
            hydra_command.append('-V')

        # Add -F option if Stop on Success is enabled
        if self.stop_on_success_checkbox.isChecked():
            hydra_command.append('-F')

        # Clear previous log output
        self.log_hydra_output.clear()

        # Disable start button and enable cancel button
        self.start_button.setEnabled(False)
        self.cancel_button.setEnabled(True)

        # Run Hydra in a separate thread
        self.hydra_thread = HydraThread(hydra_command)
        self.hydra_thread.output_signal.connect(self.update_log_output)
        self.hydra_thread.finished_signal.connect(self.on_hydra_finished)
        self.hydra_thread.start()

    def cancel_hydra_brute_force(self):
        # Stop Hydra thread if running
        if self.hydra_thread and self.hydra_thread.isRunning():
            self.hydra_thread.stop()
            self.hydra_thread.quit()
            self.hydra_thread.wait()

        # Disable buttons after cancellation
        self.start_button.setEnabled(True)
        self.cancel_button.setEnabled(False)

        # Show message box for cancellation
        QMessageBox.information(self, 'Canceled', 'Attack canceled.')

    def on_hydra_finished(self):
        # Enable start button and disable cancel button
        self.start_button.setEnabled(True)
        self.cancel_button.setEnabled(False)

        # Show message box for completion
        QMessageBox.information(self, 'Finished', 'Brute force attack completed.')

    def update_log_output(self, text):
        # Add Hydra output to log
        self.log_hydra_output.append(text)
        self.log_hydra_output.moveCursor(QTextCursor.End)

    def export_log_to_html(self):
        # Get data from Tab 1 (Nmap)
        host = self.host_input.text()
        port = self.port_input.text().strip() or '445'
        scan_technique = self.scan_technique_dropdown.currentText()
        timing = self.timing_dropdown.currentText()
        nse_checked = self.nse_checkbox.isChecked()
        version_checked = self.scan_version_checkbox.isChecked()
        os_checked = self.scan_os_checkbox.isChecked()

        # Get Nmap log
        nmap_log = self.log_nmap_output.toPlainText()

        # Get Hydra log (if available)
        hydra_log = self.log_hydra_output.toPlainText() if self.hydra_thread else None

        # Create HTML content
        html_content = f"""
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>FSMB (F*ck SMB!)</title>
            <style>
                body {{
                    background-color: #2E3440;
                    color: #ECEFF4;
                    font-family: Arial, sans-serif;
                    padding: 20px;
                }}
                h1, h2 {{
                    color: #81A1C1;
                }}
                .section {{
                    margin-bottom: 20px;
                }}
                .section h2 {{
                    border-bottom: 2px solid #81A1C1;
                    padding-bottom: 5px;
                }}
                .log {{
                    background-color: #3B4252;
                    padding: 10px;
                    border-radius: 5px;
                    white-space: pre-wrap;
                    font-family: monospace;
                }}
                footer {{
                    margin-top: 30px;
                    padding-top: 10px;
                    border-top: 1px solid #81A1C1;
                    text-align: center;
                    font-size: 12px;
                    color: #81A1C1;
                }}
            </style>
        </head>
        <body>
            <h1>FSMB (F*ck SMB!)</h1>
            
            <div class="section">
                <h2>Scan Details</h2>
                <p><strong>Host:</strong> {host}</p>
                <p><strong>SMB Port:</strong> {port}</p>
                <p><strong>Scan Technique:</strong> {scan_technique}</p>
                <p><strong>Timing:</strong> {timing}</p>
                <p><strong>Vulnerability Scan:</strong> {nse_checked}</p>
                <p><strong>Version Detection:</strong> {version_checked}</p>
                <p><strong>OS Detection:</strong> {os_checked}</p>
            </div>

            <div class="section">
                <h2>Nmap Scan Results</h2>
                <div class="log">{nmap_log}</div>
            </div>
        """

        # Add Hydra log if available
        if hydra_log:
            html_content += f"""
            <div class="section">
                <h2>Hydra Brute Force Results</h2>
                <div class="log">{hydra_log}</div>
            </div>
            """

        # Add footer
        html_content += """
            <footer>
                <p>Created by Rofi (Fixploit03)</p>
                <p>GitHub: https://github.com/fixploit03/FSMB</p>
                <p>Copyright ¬© 2025 Rofi. All rights reserved.</p>
            </footer>
        </body>
        </html>
        """

        # Save HTML to file
        options = QFileDialog.Options()
        file_name, _ = QFileDialog.getSaveFileName(self, "Save HTML File", "", "HTML Files (*.html);;All Files (*)", options=options)
        if file_name:
            try:
                with open(file_name, 'w', encoding='utf-8') as file:
                    file.write(html_content)
                QMessageBox.information(self, 'Success', 'Log exported successfully!')
            except Exception as e:
                QMessageBox.critical(self, 'Error', f'Failed to export log: {str(e)}')

    def is_valid_host(self, host):
        """Check if the host is a valid IP address or hostname."""
        ip_pattern = r'^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$'
        hostname_pattern = r'^(?!-)[A-Za-z0-9-]{1,63}(?<!-)(\.[A-Za-z]{2,})+$'
        return re.match(ip_pattern, host) or re.match(hostname_pattern, host)

    def closeEvent(self, event):
        """Override the close event to remove temporary files."""
        self.remove_temp_files()
        event.accept()

    def remove_temp_files(self):
        """Remove temporary files if they exist."""
        if os.path.exists('temp_users.txt'):
            os.remove('temp_users.txt')
        if os.path.exists('temp_passwords.txt'):
            os.remove('temp_passwords.txt')

if __name__ == '__main__':
    app = QApplication(sys.argv)
    ex = HydraBruteForceGUI()
    ex.show()
    sys.exit(app.exec_())
